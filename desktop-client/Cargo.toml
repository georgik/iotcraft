[package]
name = "iotcraft-dekstop-client"
version = "0.1.0"
edition = "2024"
default-run = "iotcraft-dekstop-client"

[lib]
name = "iotcraft_desktop_client"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Core dependencies that work on both desktop and web
# Using Bevy 0.17-dev from git for latest features
bevy = { git = "https://github.com/bevyengine/bevy.git", rev = "335e39f", features = ["webp"] }


# Optional debug console implementations
# Legacy bevy_console (desktop only) - enable with --features console-bevy
bevy_console = { version = "0.14.1", default-features = false, optional = true }

tracing = "0.1"
log = "0.4"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
ron = "0.8"
chrono = { version = "0.4", features = ["serde"] }
rand = "0.9"
hex = "0.4"
fluent = "0.17.0"
fluent-bundle = "0.16.0"
fluent-syntax = "0.12.0"
unic-langid = "0.9.6"
futures = "0.3"
futures-util = "0.3"
anyhow = "1.0"
uuid = { version = "1.0", features = ["v4"] }
bytes = "1.0"
# Async channels for Bevy-compatible communication
async-channel = "2.5"
# Compression for chunked world data
flate2 = "1.0"
# Performance optimization dependencies
bytemuck = { version = "1.16", features = ["derive"] } # GPU data alignment
crossterm = "0.29.0"
# TUI dependencies (optional, used by mcplay binary)
ratatui = { version = "0.29.0", optional = true }

# Web-specific dependencies
[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2"
web-sys = { version = "0.3", features = [
  "BinaryType",
  "Blob",
  "CloseEvent",
  "ErrorEvent",
  "FileReader",
  "MessageEvent",
  "ProgressEvent",
  "WebSocket",
  "Window",
  "console",
  "Location",
  "Storage",
] }
js-sys = "0.3"
wasm-bindgen-futures = "0.4"
console_error_panic_hook = "0.1"

# Configure both getrandom versions for WASM
getrandom = { version = "0.2", features = ["js"] }
# Add getrandom v0.3 directly to enable wasm_js feature
getrandom_03 = { package = "getrandom", version = "0.3", features = ["wasm_js"] }

# Desktop-specific dependencies (non-WASM)
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
rumqttc = "0.24.0"
# Use native-tls instead of rustls to avoid version conflicts
rumqttd = { version = "0.19.0", default-features = false, features = ["use-native-tls", "websocket"] }
# Force compatible rustls versions to avoid duplicate compilation (for rumqttc only)
rustls = "0.22.4"  # Use the newer version (from rumqttc)
tokio-rustls = "0.25.0"  # Use the newer version (from rumqttc)
rustls-webpki = "0.102.8"  # Use the newer version (from rumqttc)
tokio = { version = "1.47", features = ["rt-multi-thread", "macros", "fs", "net", "process", "signal"] }
axum = "0.8"
tower = "0.5"
tower-http = { version = "0.6", features = ["cors"] }
clap = { version = "4.5", features = ["derive"] }
tracing-subscriber = "0.3"
env_logger = "0.10"
dirs = "6.0"
whoami = "1.5"
tokio-util = { version = "0.7", features = ["codec"] }
rayon = "1.8" # Parallel processing
tempfile = "3.8" # For testing async file operations

# Enable max optimizations for dependencies (incl. Bevy), but not for our code
# This keeps recompilations fast while making Bevy run at good performance
[profile.dev.package."*"]
opt-level = 3

# Enable a small amount of optimization for our own code if needed
# Split compilation units for faster incremental builds
[profile.dev]
opt-level = 1
incremental = true
codegen-units = 256

# Optimize for size in WASM builds (important for web loading times)
[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1

# Special profile for WASM release builds
[profile.wasm-release]
inherits = "release"
opt-level = "s"  # Optimize for size
lto = true
codegen-units = 1
strip = true

[build-dependencies]
chrono = "0.4"

# Workspace for xtask
[features]
default = ["console", "tui"]
# Console implementations (choose one)
console-bevy = ["dep:bevy_console"]  # Legacy desktop-only console
# Convenience feature aliases
console = []                          # Default to Simple console (no extra deps)
# TUI feature for mcplay
tui = ["dep:ratatui"]
# Test-specific features
integration-tests = []                # Feature to enable integration tests


[workspace]
members = [".", "xtask"]

# Binary configurations
# Desktop-only main binary
[[bin]]
name = "iotcraft-dekstop-client"
path = "src/main.rs"
required-features = []

# Desktop-only binaries - exclude from WASM builds
[[bin]]
name = "mcp_test_client"
path = "src/bin/mcp_test_client.rs"
required-features = []

[[bin]]
name = "mqtt_test"
path = "src/bin/mqtt_test.rs"
required-features = []

[[bin]]
name = "mcplay"
path = "src/bin/mcplay.rs"
required-features = []

# Custom commands (use via .cargo/config.toml for local aliases)
# For now, use: cargo run --package xtask -- <command>

# Test configuration
[dev-dependencies]
# Testing utilities
[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tokio-test = "0.4"

# Integration test configuration
[[test]]
name = "integration"
path = "tests/integration/main.rs"
required-features = ["integration-tests"]

# Test-specific features - moved to main features section above

