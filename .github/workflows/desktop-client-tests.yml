name: Desktop Client Tests

on:
  push:
    paths:
      - 'desktop-client/**'
      - '.github/workflows/desktop-client-tests.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running the workflow'
        required: false
        default: 'Manual test run'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          libx11-dev \
          libasound2-dev \
          libudev-dev \
          libxkbcommon-x11-0 \
          libwayland-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libxinerama-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install cargo-nextest for better test reporting
      uses: taiki-e/install-action@nextest
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: desktop-client
        
    - name: Check formatting
      run: |
        cd desktop-client
        cargo fmt --all -- --check
      continue-on-error: true

    - name: Run clippy
      run: |
        cd desktop-client
        cargo clippy --all-targets --all-features -- -D warnings
      continue-on-error: true

    - name: Run unit tests with nextest
      run: |
        cd desktop-client
        mkdir -p test-results
        cargo nextest run --all-features --workspace \
          --profile ci \
          --junit-output test-results/nextest-junit.xml \
          --verbose

    - name: Run unit tests (fallback)
      if: failure()
      run: |
        cd desktop-client
        mkdir -p test-results
        cargo test --all-features --workspace --verbose -- --format junit > test-results/cargo-junit.xml || true
        cargo test --all-features --workspace --verbose

    - name: Generate test summary
      if: always()
      run: |
        cd desktop-client
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test-results/nextest-junit.xml" ]; then
          echo "✅ Tests completed using cargo-nextest" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Tests completed using fallback cargo test" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Output" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cargo test --all-features --workspace --no-run --message-format=json 2>/dev/null | \
          jq -r 'select(.reason == "compiler-artifact" and .target.kind[] == "test") | "Test: " + .target.name' >> $GITHUB_STEP_SUMMARY || echo "Test discovery failed" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: desktop-client/test-results/
        retention-days: 30

    - name: Publish test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Unit Test Results
        path: 'desktop-client/test-results/*.xml'
        reporter: java-junit
        fail-on-error: true

    - name: Check if build works
      run: |
        cd desktop-client
        cargo check --all-targets --all-features

    - name: Test MCP integration
      run: |
        cd desktop-client
        echo "## MCP Integration Test" >> $GITHUB_STEP_SUMMARY
        cargo run --bin mcp_test_client -- run-tests --output-file mcp-test-results.json || true
        if [ -f "mcp-test-results.json" ]; then
          echo "✅ MCP tests completed" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          head -20 mcp-test-results.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ MCP tests could not complete (server may not be running)" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true
