// MQTT Single Connection World Publication Test
// Validates the single MQTT connection approach by testing world publication
Scenario(
    name: "mqtt_single_connection_test",
    description: "Tests single MQTT connection approach with world publication and comprehensive MQTT monitoring",
    version: "1.0",
    
    // Infrastructure with MQTT observer for validation
    infrastructure: InfrastructureConfig(
        mqtt_server: MqttServerConfig(
            required: true,
            port: 1883,
            config_file: None,
            options: None,
        ),
        mqtt_observer: Some(MqttObserverConfig(
            required: true,
            topics: Some([
                "#",  // Monitor all MQTT topics
                "iotcraft/worlds/+/info",  // World discovery messages
                "iotcraft/worlds/+/data",  // Complete world data messages
            ]),
            client_id: Some("mqtt_single_test_observer"),
        )),
        mcp_server: None,
        services: None,
    ),
    
    // Single client: Alice
    clients: [
        ClientConfig(
            id: "alice",
            player_id: "alice_world_publisher", 
            mcp_port: 8080,
            client_type: "desktop",
            name: Some("Alice - Single MQTT Connection Test"),
            config: None,
        ),
    ],
    
    // Test steps
    steps: [
        // Step 1: Initialize Alice's MCP connection
        Step(
            name: "alice_mcp_initialize",
            description: "Initialize Alice's MCP connection",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "initialize",
                arguments: {
                    "protocolVersion": "2024-11-05",
                    "capabilities": { "tools": {} },
                    "clientInfo": {
                        "name": "alice-mqtt-single-test",
                        "version": "1.0.0"
                    }
                },
            ),
            wait_before: 2000,
            wait_after: 500,
            timeout: 15000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: [],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 2: Get MQTT status to validate single connection
        Step(
            name: "alice_get_mqtt_status",
            description: "Get MQTT connection status to validate single connection approach",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_mqtt_status",
                arguments: {},
            ),
            wait_before: 1000,
            wait_after: 500,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_mcp_initialize"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 3: Alice creates a test world
        Step(
            name: "alice_create_world",
            description: "Alice creates a test world for MQTT publication validation",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "create_world",
                arguments: {
                    "world_name": "mqtt_single_test_world",
                    "description": "Test world for validating single MQTT connection"
                },
            ),
            wait_before: 500,
            wait_after: 3000,
            timeout: 25000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_get_mqtt_status"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 4: Verify Alice is in InGame state
        Step(
            name: "verify_alice_ingame",
            description: "Verify Alice transitioned to InGame state after world creation",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_game_state",
                arguments: {},
            ),
            wait_before: 500,
            wait_after: 500,
            timeout: 8000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_create_world"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 5: Alice places a block to create world content
        Step(
            name: "alice_add_content",
            description: "Alice places a block to create meaningful world content",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "place_block",
                arguments: {
                    "x": 5,
                    "y": 1,
                    "z": 5,
                    "block_type": "Stone"
                },
            ),
            wait_before: 500,
            wait_after: 500,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["verify_alice_ingame"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 6: Alice publishes the world - CRITICAL TEST STEP
        Step(
            name: "alice_publish_world",
            description: "Alice publishes world via single MQTT connection - CRITICAL validation step",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "publish_world",
                arguments: {
                    "world_name": "mqtt_single_test_world",
                    "max_players": 8,
                    "is_public": true
                },
            ),
            wait_before: 1000,
            wait_after: 5000,  // Extended wait to capture all MQTT messages
            timeout: 20000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_add_content"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 7: Verify publication status
        Step(
            name: "verify_publication_status",
            description: "Verify world publication status through multiplayer system",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_multiplayer_status",
                arguments: {},
            ),
            wait_before: 500,
            wait_after: 2000,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_publish_world"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 8: Final MQTT status check
        Step(
            name: "final_mqtt_status",
            description: "Final check of MQTT connection status after world publication",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_mqtt_status",
                arguments: {},
            ),
            wait_before: 500,
            wait_after: 1000,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["verify_publication_status"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
    ],
    
    // Configuration
    config: Some(ScenarioConfig(
        timeout_ms: Some(180000), // 3 minutes total timeout
        logging: Some(LoggingConfig(
            level: Some("info"),
            log_mqtt: Some(true),
            log_client_actions: Some(true),
            filters: Some([
                "mqtt/*",
                "multiplayer/*", 
                "world/*", 
                "mcp/*",
                "publish_world",
                "create_world",
                "GameState",
                "iotcraft/worlds",
            ]),
        )),
        environment: Some({
            "RUST_LOG": "info,iotcraft_desktop_client::mqtt::core_service=debug,iotcraft_desktop_client::multiplayer=debug",
            "SCENARIO_NAME": "mqtt_single_connection_test",
            "ENABLE_MCP": "true",
        }),
        settings: Some({
            "auto_cleanup": true,
            "preserve_logs": true,
            "fail_fast": false,
        }),
    )),
)
