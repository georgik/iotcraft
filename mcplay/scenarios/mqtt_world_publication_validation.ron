// MQTT World Publication Validation Test
// Tests single MQTT connection approach by validating:
// 1. Alice connects to MQTT via single connection
// 2. Alice creates world and enters game state  
// 3. Alice shares world - MQTT observer validates publication
// 4. Validates both world info message and complete world data serialization
Scenario(
    name: "mqtt_world_publication_validation",
    description: "Validates single MQTT connection approach by testing world publication with comprehensive MQTT monitoring",
    version: "1.0",
    
    // Full infrastructure with MQTT observer for comprehensive monitoring
    infrastructure: InfrastructureConfig(
        mqtt_server: MqttServerConfig(
            required: true,
            port: 1883,
            config_file: None,
            options: Some({
                "log_level": "info",
                "max_packet_size": "1048576",  // 1MB for large world data
                "max_inflight_messages": "100",
            }),
        ),
        mqtt_observer: Some(MqttObserverConfig(
            required: true,
            topics: Some([
                "#",  // Monitor all MQTT topics
                "iotcraft/worlds/+/info",  // World discovery messages
                "iotcraft/worlds/+/data",  // Complete world data messages
                "iotcraft/worlds/+/players/+/pose",  // Player poses
                "home/sensor/temperature",  // IoT device messages
                "devices/announce",  // Device announcements
            ]),
            client_id: Some("mqtt_validation_observer"),
        )),
        mcp_server: None,
        services: None,
    ),
    
    // Single client: Alice (world creator and publisher)
    clients: [
        ClientConfig(
            id: "alice",
            player_id: "alice_world_publisher", 
            mcp_port: 8080,
            client_type: "desktop",
            name: Some("Alice - World Publisher (Single MQTT Connection Test)"),
            config: Some({
                "mqtt_host": "localhost",
                "mqtt_port": "1883",
                "enable_multiplayer": true,
                "log_level": "info",
            }),
        ),
    ],
    
    // Comprehensive validation steps
    steps: [
        // Step 1: Initialize Alice's MCP connection
        Step(
            name: "alice_mcp_initialize",
            description: "Initialize Alice's MCP connection for world management",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "initialize",
                arguments: {
                    "protocolVersion": "2024-11-05",
                    "capabilities": { "tools": {} },
                    "clientInfo": {
                        "name": "alice-mqtt-world-publisher",
                        "version": "1.0.0"
                    }
                },
            ),
            wait_before: 2000,  // Allow MQTT connection to establish
            wait_after: 500,
            timeout: 15000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: [],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 2: Wait for MQTT connection to be fully established
        Step(
            name: "wait_mqtt_connection",
            description: "Wait for Alice's single MQTT connection to be fully established",
            client: "orchestrator",
            action: (
                type: "wait_condition",
                condition: "time_elapsed",
                expected_value: Some("3000"),  // Wait 3 seconds
            ),
            wait_before: 0,
            wait_after: 0,
            timeout: 10000,
            success_condition: None,
            depends_on: ["alice_mcp_initialize"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 3: Get initial MQTT status
        Step(
            name: "alice_get_mqtt_status",
            description: "Get Alice's MQTT connection status to validate single connection approach",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_mqtt_status",
                arguments: {},
            ),
            wait_before: 500,
            wait_after: 300,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["wait_mqtt_connection"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 4: Alice creates a test world
        Step(
            name: "alice_create_world",
            description: "Alice creates a test world for MQTT publication validation",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "create_world",
                arguments: {
                    "world_name": "mqtt_validation_world",
                    "description": "Test world for validating MQTT publication via single connection",
                    "template": "default"
                },
            ),
            wait_before: 1000,
            wait_after: 3000,  // Allow world creation to complete
            timeout: 25000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_get_mqtt_status"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 5: Verify Alice is in InGame state
        Step(
            name: "verify_alice_ingame",
            description: "Verify Alice transitioned to InGame state after world creation",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_game_state",
                arguments: {},
            ),
            wait_before: 500,
            wait_after: 300,
            timeout: 8000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_create_world"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 6: Alice places some blocks to create world content
        Step(
            name: "alice_add_world_content",
            description: "Alice places blocks to create meaningful world content for publication",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "place_block",
                arguments: {
                    "x": 5,
                    "y": 1, 
                    "z": 5,
                    "block_type": "Stone"
                },
            ),
            wait_before: 500,
            wait_after: 200,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["verify_alice_ingame"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 7: Alice places more blocks
        Step(
            name: "alice_add_more_content",
            description: "Alice places additional blocks to increase world data size",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "place_block",
                arguments: {
                    "x": 6,
                    "y": 1,
                    "z": 5,
                    "block_type": "Grass"
                },
            ),
            wait_before: 200,
            wait_after: 200,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_add_world_content"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 8: Alice publishes the world - CRITICAL TEST STEP
        Step(
            name: "alice_publish_world",
            description: "Alice publishes world via single MQTT connection - CRITICAL validation step",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "publish_world",
                arguments: {
                    "world_name": "mqtt_validation_world",
                    "max_players": 8,
                    "is_public": true
                },
            ),
            wait_before: 1000,
            wait_after: 5000,  // Extended wait to capture all MQTT messages
            timeout: 20000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_add_more_content"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 9: Verify publication via multiplayer status
        Step(
            name: "verify_publication_status",
            description: "Verify world publication status through multiplayer system",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_multiplayer_status",
                arguments: {},
            ),
            wait_before: 500,
            wait_after: 500,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["alice_publish_world"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 10: Wait to observe MQTT traffic
        Step(
            name: "observe_mqtt_traffic",
            description: "Wait period to observe and validate MQTT message patterns",
            client: "orchestrator",
            action: (
                type: "wait_condition",
                condition: "time_elapsed",
                expected_value: Some("3000"),  // Wait 3 seconds to capture traffic
            ),
            wait_before: 0,
            wait_after: 1000,
            timeout: 10000,
            success_condition: None,
            depends_on: ["verify_publication_status"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
        
        // Step 11: Final MQTT status check
        Step(
            name: "final_mqtt_status",
            description: "Final check of MQTT connection status after world publication",
            client: "alice",
            action: (
                type: "mcp_call",
                tool: "get_mqtt_status",
                arguments: {},
            ),
            wait_before: 500,
            wait_after: 500,
            timeout: 10000,
            success_condition: Some((
                type: "mcp_response",
                expected: "success",
            )),
            depends_on: ["observe_mqtt_traffic"],
            timing: None,
            conditions: None,
            expectations: None,
        ),
    ],
    
    // Enhanced configuration for comprehensive validation
    config: Some(ScenarioConfig(
        timeout_ms: Some(180000), // 3 minutes total timeout
        logging: Some(LoggingConfig(
            level: Some("info"),
            log_mqtt: Some(true),
            log_client_actions: Some(true),
            filters: Some([
                "mqtt/*",
                "multiplayer/*", 
                "world/*", 
                "mcp/*",
                "core_service/*",
                "publish_world",
                "create_world",
                "GameState",
                "iotcraft/worlds",
                "OutgoingMqttMessage",
                "WorldPublishEvent",
                "CoreMqttService",
            ]),
        )),
        environment: Some({
            "RUST_LOG": "info,iotcraft_desktop_client::mqtt::core_service=debug,iotcraft_desktop_client::multiplayer=debug",
            "SCENARIO_NAME": "mqtt_world_publication_validation",
            "ENABLE_MCP": "true",
            "MQTT_HOST": "localhost",
            "MQTT_PORT": "1883",
        }),
        settings: Some({
            "auto_cleanup": true,
            "preserve_logs": true,
            "fail_fast": false,  // Continue even if intermediate steps fail
            "verbose_mqtt": true,
            "capture_full_mqtt_log": true,
        }),
    )),
)
