(
  name: "Alice (Desktop) & Bob (WASM) Multi-Platform Test",
  description: "Alice creates a world on desktop client while Bob joins via web browser. Demonstrates cross-platform multiplayer between native desktop and WebAssembly clients.",
  version: "1.0",
  infrastructure: (
    mqtt_server: (
      required: true,
      port: 1883,
      config_file: None,
      options: None,
    ),
    mqtt_observer: Some((
      required: true, 
      topics: Some(["#"]),
      client_id: Some("cross_platform_observer"),
    )),
    mcp_server: None,
    services: None,
  ),
  clients: [
    (
      id: "alice",
      player_id: "alice_desktop",
      mcp_port: 3001,
      client_type: "desktop",
      name: Some("Alice - Desktop Host"),
      config: Some({
        "enable_mcp": true,
        "readiness_probe": {
          "type": "tcp_port", 
          "port": 3001,
          "initial_delay_seconds": 5,
          "timeout_seconds": 20
        },
        "liveness_probe": {
          "type": "mcp_ping",
          "interval_seconds": 30,
          "timeout_seconds": 10,
          "failure_threshold": 5
        }
      }),
    ),
    // Note: Bob runs in browser, so no direct MCP connection
    // Manual interaction required via browser at http://localhost:8000
  ],
  steps: [
    // Step 1: Alice checks her client status
    (
      name: "alice_client_check",
      description: "Alice verifies her desktop client is ready",
      client: "alice",
      action: (
        type: "mcp_call",
        tool: "get_client_info",
        arguments: {},
      ),
      depends_on: [],
      wait_before: 3000,  // Wait for Alice to be ready
      wait_after: 2000,
      timeout: 20000,
      success_condition: None,
    ),
    
    // Step 2: Alice creates a cross-platform test world
    (
      name: "alice_create_cross_platform_world",
      description: "Alice creates a new world for cross-platform testing",
      client: "alice",
      action: (
        type: "mcp_call",
        tool: "create_world",
        arguments: {
          "world_name": "cross_platform_medieval_world",
          "description": "A medieval world for Alice (desktop) and Bob (WASM) cross-platform multiplayer adventure",
          "template": "medieval",
        },
      ),
      depends_on: ["alice_client_check"],
      wait_before: 2000,
      wait_after: 5000,   // Wait for world creation and auto state transition
      timeout: 30000,
      success_condition: None,
    ),
    
    // Step 3: Alice builds some initial content
    (
      name: "alice_build_welcome_structure",
      description: "Alice places some blocks to welcome Bob to the cross-platform world",
      client: "alice",
      action: (
        type: "mcp_call",
        tool: "create_wall",
        arguments: {
          "block_type": "grass",
          "x1": 0,
          "y1": 1,
          "z1": 0,
          "x2": 10,
          "y2": 1,
          "z2": 0,
        },
      ),
      depends_on: ["alice_create_cross_platform_world"],
      wait_before: 2000,
      wait_after: 2000,
      timeout: 15000,
      success_condition: None,
    ),
    
    (
      name: "alice_add_welcome_tower",
      description: "Alice builds a tower to mark the spawn area",
      client: "alice",
      action: (
        type: "mcp_call",
        tool: "create_wall",
        arguments: {
          "block_type": "stone",
          "x1": 5,
          "y1": 2,
          "z1": 0,
          "x2": 5,
          "y2": 5,
          "z2": 0,
        },
      ),
      depends_on: ["alice_build_welcome_structure"],
      wait_before: 1000,
      wait_after: 2000,
      timeout: 15000,
      success_condition: None,
    ),
    
    // Step 4: Alice publishes her world for multiplayer
    (
      name: "alice_publish_cross_platform_world", 
      description: "Alice publishes her world for Bob (WASM) to join",
      client: "alice",
      action: (
        type: "mcp_call",
        tool: "publish_world",
        arguments: {
          "world_name": "cross_platform_medieval_world",
          "max_players": 4,
          "is_public": true,
        },
      ),
      depends_on: ["alice_add_welcome_tower"],
      wait_before: 2000,
      wait_after: 5000,   // Wait for world to be published and MQTT propagation
      timeout: 25000,
      success_condition: None,
    ),
    
    // Step 5: Verify Alice's multiplayer status
    (
      name: "alice_check_multiplayer_hosting",
      description: "Alice verifies she is hosting the world for cross-platform play",
      client: "alice",
      action: (
        type: "mcp_call",
        tool: "get_multiplayer_status",
        arguments: {},
      ),
      depends_on: ["alice_publish_cross_platform_world"],
      wait_before: 2000,
      wait_after: 2000,
      timeout: 15000,
      success_condition: None,
    ),
    
    // Step 6: Manual instruction to start Bob's WASM client
    (
      name: "prepare_bob_wasm_instructions",
      description: "Display instructions for starting Bob's WASM client manually",
      client: "alice",
      action: (
        type: "delay",
        duration: 3000,
      ),
      depends_on: ["alice_check_multiplayer_hosting"],
      wait_before: 1000,
      wait_after: 1000,
      timeout: 10000,
      success_condition: None,
    ),
    
    // Step 7: Wait for manual Bob interaction via browser
    (
      name: "manual_bob_browser_interaction",
      description: "‚ú® READY FOR BOB! ‚ú®

üåê Bob can now join via browser:
   üëâ http://localhost:8000

üìã Manual Setup for Bob (WASM):
   1. Open a new terminal in desktop-client directory
   2. Run: cargo ctask web-build --release
   3. Run: cargo ctask web-serve  
   4. Open browser to http://localhost:8000
   5. Click 'Enter World' in main menu
   6. Look for Alice's published world 'cross_platform_medieval_world'
   7. Join the medieval world to test cross-platform multiplayer

üñ•Ô∏è Alice (Desktop) is hosting the world and ready!
‚è≥ Press Ctrl+C when testing is complete.",
      client: "alice",
      action: (
        type: "wait_condition",
        condition: "manual_cross_platform_testing_complete",
        expected_value: Some("never_reached"),
        timeout: 3600000,  // 1 hour timeout as safety
      ),
      depends_on: ["prepare_bob_wasm_instructions"],
      wait_before: 2000,
      wait_after: 0,
      timeout: 7200000,  // 2 hours max for manual testing
      success_condition: None,
    ),
  ],
  config: Some((
    timeout_ms: Some(7200000),  // 2 hours max runtime for extended testing
    logging: Some((
      level: Some("info"),
      log_mqtt: Some(true),
      log_client_actions: Some(true),
      filters: Some([
        "cross-platform/*", 
        "wasm/*",
        "world/*", 
        "mcp/*", 
        "alice", 
        "bob",
        "desktop",
        "browser",
        "publish",
        "InGame"
      ]),
    )),
    environment: Some({
      "RUST_LOG": "info,iotcraft_desktop_client=debug",
      "SCENARIO_NAME": "alice_desktop_bob_wasm",
      "ENABLE_MCP": "true",
      "MULTIPLAYER_MODE": "enabled",
      "CROSS_PLATFORM_TEST": "true",
    }),
    settings: Some({
      "auto_cleanup": true,
      "preserve_logs": true,
      "manual_testing_mode": true,
      "fail_fast": false,  // Continue even if non-critical steps fail
      "extended_session": true,
      "cross_platform_test": true,
    }),
  )),
)
